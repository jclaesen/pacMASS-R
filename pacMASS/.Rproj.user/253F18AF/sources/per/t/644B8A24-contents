calculateAC <- function(nbS, totalWeight, ppm, alpha){

  weight <- c(12,1.0078250321,14.0030740052,15.9949146,31.97207070)

  idx <- which(AC$S==nbS)
  AC2 <- AC[idx, ]
  RR12 <- isoDistr[idx,1]
  RR23 <- isoDistr[idx,2]
  RR34 <- isoDistr[idx,3]
  RR45 <- isoDistr[idx,4]

  tolerance <- ppm*totalWeight/10^6

  test <- calcRelRatios(nbS=nbS, monoMass=totalWeight, alpha=alpha)
  idx2 <- which(RR12>=test[1,2] & RR12<=test[1,3])
  idx3 <- which(RR23>=test[2,2] & RR23<=test[2,3])
  idx4 <- which(RR34>=test[3,2] & RR34<=test[3,3])
  idx5 <- which(RR45>=test[4,2] & RR45<=test[4,3])

  idxR <- which(RR45>=test[4,2] & RR45<=test[4,3] & RR12>=test[1,2] & RR12<=test[1,3] & RR23>=test[2,2] & RR23<=test[2,3] & RR34>=test[3,2] & RR34<=test[3,3])
  if(length(idxR)){
    nbCombined <- c(min(AC2$C[idxR]),min(AC2$H[idxR]),min(AC2$N[idxR]),min(AC2$O[idxR]),nbS)
    nbCombinedUP <- c(max(AC2$C[idxR]),max(AC2$H[idxR]),max(AC2$N[idxR]),max(AC2$O[idxR]),nbS)

    tAble <- lapply(nbCombinedUP-nbCombined, seq.int,from=0,by=1)

    nominalMass <- round(calcNominalMass(nbS=nbS, monoMass=totalWeight, alpha=alpha))
    nM <-"NA"

    if(length(unique(as.vector(nominalMass)))==1){
      nM <- unique(as.vector(nominalMass))

      if(nbCombined[3]%%2==0){

        if(nM%%2!=0){

          nbCombined[3] <- nbCombined[3]-1
        }

      }else{

        if(nM%%2==0){

          nbCombined[3] <- nbCombined[3]-1
        }
      }

      tAble[[3]]<-seq.int(0,nbCombinedUP[3]-nbCombined[3],by=2)

      remainderH <- nbCombined[2]%%4
      remainderNM <- nM%%4

      if(remainderNM==0){#remainderH has to be 0

        if(remainderH!=0){

          nbCombined[2] <- nbCombined[2]-remainderH
        }

      }else if(remainderNM==1){#remainderH has to be 3

        if(remainderH==0){

          nbCombined[2] <- nbCombined[2]-1 #ok
        }
        else if(remainderH==1){

          nbCombined[2] <- nbCombined[2]-2  #ok

        }
        else if(remainderH==2){

          nbCombined[2] <- nbCombined[2]-3  #ok
        }

      }else if(remainderNM==2){#remainderH has to be 2

        if(remainderH==0){

          nbCombined[2] <- nbCombined[2]-2 #ok
        }
        else if(remainderH==1){

          nbCombined[2] <- nbCombined[2]-3 #ok

        }
        else if(remainderH==3){

          nbCombined[2] <- nbCombined[2]-1 #ok
        }

      }else if(remainderNM==3){#remainderH has to be 1

        if(remainderH==0){

          nbCombined[2] <- nbCombined[2]-3 #ok
        }
        else if(remainderH==2){

          nbCombined[2] <- nbCombined[2]-1 #ok

        }
        else if(remainderH==3){

          nbCombined[2] <- nbCombined[2]-2 #ok
        }
      }

      tAble[[2]]<-seq.int(0,nbCombinedUP[2]-nbCombined[2],by=4)
    }


    massC <- tAble[[1]]*weight[1]
    massH <- tAble[[2]]*weight[2]
    massN <- tAble[[3]]*weight[3]
    massO <- tAble[[4]]*weight[4]
    massS <- tAble[[5]]*weight[5]

    combinationsAC <- expand.grid(tAble[[1]],tAble[[2]],tAble[[3]],tAble[[4]],tAble[[5]])
    combinationsMASS <- expand.grid(massC,massH,massN,massO,massS)
    colnames(combinationsAC) <- c("C","H","N","O","S")

    masses <- rowSums(combinationsMASS)
    maSS <- masses+sum(nbCombined*weight)
    idX <- which(maSS<=(totalWeight+tolerance)& maSS>=(totalWeight-tolerance))
    res <- t(apply(combinationsAC[idX,],1,function(x,nbCombined) x+nbCombined,nbCombined))
    out2 <- cbind(res,maSS[idX])

    if(dim(out2)[2]!=0){
      if(is.na(nM)){
        valences <- c(4,1,5,6,6,0)
        out3 <-out2[which((out2%*%valences)%%2==0),]
        return(out3[order(out3[,1]),])
      }else{
        return(out2[order(out2[,1]),])
      }
    }else{

      return(NA)
    }
  }else{
    return(NA)
  }
}
